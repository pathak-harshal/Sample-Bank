import 'dart:async';

import 'package:flutter/material.dart';
import 'package:mobx/mobx.dart';
import 'package:sample_bank/model/index.dart';
import 'package:sample_bank/utility/api_repository.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

part 'login_store.g.dart'; // This will be generated by build_runner

class LoginStore = _LoginStore with _$LoginStore;

abstract class _LoginStore with Store {
  final ApiRepository _apiRepository;
  final FlutterSecureStorage _secureStorage;

  _LoginStore(this._apiRepository, this._secureStorage);
  // Observables
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final Observable<bool> isLoading = Observable(false);
  final Observable<String?> error = Observable(null);
  final Observable<LoginResponse?> loginResponse = Observable(null);

  // Actions
  @action
  Future<void> login() async {
    isLoading.value = true;
    error.value = null;

    try {
      final loginRequest = LoginRequest(
        userName: usernameController.text,
        password: passwordController.text,
      );
      loginResponse.value =
          await _apiRepository.login(loginRequest: loginRequest);
      _secureStorage.write(
          key: 'accessToken', value: loginResponse.value?.accessToken);
    } catch (error) {
      this.error.value = error.toString();
    } finally {
      usernameController.text = '';
      passwordController.text = '';
      isLoading.value = false;
    }
  }

  @action
  Future<bool> checkLoginStatus() async {
    isLoading.value = true;
    error.value = null;
    try {
      final accessToken = await _secureStorage.read(key: 'accessToken') ?? '';
      final loginResponse =
          await _apiRepository.checkLoginStatus(accessToken: accessToken);
      return loginResponse;
    } catch (error) {
      this.error.value = error.toString();
      return false;
    } finally {
      isLoading.value = false;
    }
  }

  @action
  Future<void> logout() async {
    await _clearSavedToken();
  }

  Future<void> _clearSavedToken() async {
    await _secureStorage.deleteAll();
  }
}
